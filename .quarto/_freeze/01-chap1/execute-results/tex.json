{
  "hash": "bcf4fc84795ac08c733e54926e7aa710",
  "result": {
    "markdown": "```{=html}\n<!--\nThis is for including Chapter 1.  Notice that it's also good practice to name your chunk.  This will help you debug potential issues as you knit.  The chunk above is called intro and the one below is called chapter1.  Feel free to change the name of the qmd file as you wish, but don't forget to change it here from chap1.Rmd.\n-->\n```\n\n```{=html}\n<!--\nThe {#sec-qmd-basics} text after the chapter declaration will allow us to link throughout the document back to the beginning of Chapter 1.  These labels will automatically be generated (if not specified) by changing the spaces to hyphens and capital letters to lowercase.  Look for the reference to this label at the beginning of Chapter 2.\n-->\n```\n\n\n\n# Quarto/Markdown Basics {#sec-qmd-basics}\n\n<!-- In order for a chapter to be cross-referenceable, its label must start with the sec- prefix. -->\n\nHere is a brief introduction into using *Quarto*. *Markdown* is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. *Quarto* provides the flexibility of *Markdown* with the implementation of **R**, **Python**, **Julia**, **Observable** input and output. For more details on using *Quarto* see <https://quarto.org>. We will be focusing on **R** in this template but they can be easily adopted to other programming language supported by *Quarto*.\n\nBe careful with your spacing in *Markdown* documents. While whitespace largely is ignored, it does at times give *Markdown* signals as to how to proceed. As a habit, try to keep everything left aligned whenever possible, especially as you type a new paragraph. In other words, there is no need to indent basic text in the Rmd document (in fact, it might cause your text to do funny things if you do).\n\n## Lists\n\nIt's easy to create a list. It can be unordered like\n\n-   Item 1\n-   Item 2\n\nor it can be ordered like\n\n1.  Item 1\n2.  Item 2\n\nNotice that I intentionally mislabeled Item 2 as number 4. *Markdown* automatically figures this out! You can put any numbers in the list and it will create the list. Check it out below.\n\nTo create a sublist, just indent the values a bit (at least four spaces or a tab). (Here's one case where indentation is key!)\n\n1.  Item 1\n2.  Item 2\n3.  Item 3\n    -   Item 3a\n    -   Item 3b\n\n## Line breaks\n\nMake sure to add white space between lines if you'd like to start a new paragraph. Look at what happens below in the outputted document if you don't:\n\nHere is the first sentence. Here is another sentence. Here is the last sentence to end the paragraph. This should be a new paragraph.\n\n*Now for the correct way:*\n\nHere is the first sentence. Here is another sentence. Here is the last sentence to end the paragraph.\n\nThis should be a new paragraph.\n\n## Code chunks\n\nWhen you click the **Render** button above a document will be generated that includes both content as well as the output of any embedded (**R**, **Python** or etc) code chunks within the document. You can embed an code chunk like this (`cars` is a built-in **R** dataset):\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(cars)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     speed           dist       \n Min.   : 4.0   Min.   :  2.00  \n 1st Qu.:12.0   1st Qu.: 26.00  \n Median :15.0   Median : 36.00  \n Mean   :15.4   Mean   : 42.98  \n 3rd Qu.:19.0   3rd Qu.: 56.00  \n Max.   :25.0   Max.   :120.00  \n```\n:::\n:::\n\n\n\n## Inline code\n\nIf you'd like to put the results of your analysis directly into your discussion, add inline code like this:\n\n> The `cos` of $2 \\pi$ is 1.\n\nAnother example would be the direct calculation of the standard deviation:\n\n> The standard deviation of `speed` in `cars` is 5.2876444.\n\nOne last neat feature is the use of the `ifelse` conditional statement which can be used to output text depending on the result of an **R** calculation:\n\n> The standard deviation is less than 6.\n\nNote the use of `>` here, which signifies a quotation environment that will be indented.\n\nAs you see with `$2 \\pi$` above, mathematics can be added by surrounding the mathematical text with dollar signs. More examples of this are in \\[Mathematics and Science\\] if you uncomment the code in @math-sci.\n\n## Including plots\n\nYou can also embed plots. For example, here is a way to use the base **R** graphics package to produce a plot using the built-in `pressure` dataset:\n\n\n\n::: {.cell hash='01-chap1_cache/pdf/pressure_119476fb94b498eb51692750ae18c317'}\n::: {.cell-output-display}\n![](01-chap1_files/figure-pdf/pressure-1.pdf)\n:::\n:::\n\n\n\nNote that the `echo=FALSE` parameter was added to the code chunk to prevent printing of the **R** code that generated the plot. There are plenty of other ways to add chunk options. More information is available at <http://yihui.name/knitr/options/>.\n\nAnother useful chunk option is the setting of `cache=TRUE` as you see here. If document rendering becomes time consuming due to long computations or plots that are expensive to generate you can use knitr caching to improve performance. Later in this file, you'll see a way to reference plots created in **R** or external figures.\n\n## Loading and exploring data\n\nIncluded in this template is a file called `flights.csv`. This file includes a subset of the larger dataset of information about all flights that departed from Seattle and Portland in 2014. More information about this dataset and its **R** package is available at <http://github.com/ismayc/pnwflights14>. This subset includes only Portland flights and only rows that were complete with no missing values. Merges were also done with the `airports` and `airlines` data sets in the `pnwflights14` package to get more descriptive airport and airline names.\n\nWe can load in this data set using the following command:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights <- read.csv(\"data/flights.csv\")\n```\n:::\n\n\n\nThe data is now stored in the data frame called `flights` in **R**. To get a better feel for the variables included in this dataset we can use a variety of functions. Here we can see the dimensions (rows by columns) and also the names of the columns.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndim(flights)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 52808    16\n```\n:::\n\n```{.r .cell-code}\nnames(flights)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"month\"        \"day\"          \"dep_time\"     \"dep_delay\"    \"arr_time\"    \n [6] \"arr_delay\"    \"carrier\"      \"tailnum\"      \"flight\"       \"dest\"        \n[11] \"air_time\"     \"distance\"     \"hour\"         \"minute\"       \"carrier_name\"\n[16] \"dest_name\"   \n```\n:::\n:::\n\n\n\nAnother good idea is to take a look at the dataset in table form. With this dataset having more than 50,000 rows, we won't explicitly show the results of the command here. I recommend you enter the command into the Console ***after*** you have run the **R** chunks above to load the data into **R**.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nView(flights)\n```\n:::\n\n\n\nWhile not required, it is highly recommended you use the `dplyr` package to manipulate and summarize your data set as needed. It uses a syntax that is easy to understand using chaining operations. Below I've created a few examples of using `dplyr` to get information about the Portland flights in 2014. You will also see the use of the `ggplot2` package, which produces beautiful, high-quality academic visuals.\n\nWe begin by checking to ensure that needed packages are installed and then we load them into our current working environment:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# List of packages required for this analysis\npkg <- c(\"tidyverse\", \"dplyr\", \"ggplot2\", \"knitr\", \"devtools\")\n# Check if packages are not installed and assign the\n# names of the packages not installed to the variable new.pkg\nnew.pkg <- pkg[!(pkg %in% installed.packages())]\n# If there are any packages in the list that aren't installed,\n# install them\nif (length(new.pkg))\n  install.packages(new.pkg, repos = \"http://cran.rstudio.com\")\n# Load packages \nlibrary(tidyverse)\nlibrary(knitr)\n```\n:::\n\n\n\n\\clearpage\n\nThe example we show here does the following:\n\n-   Selects only the `carrier_name` and `arr_delay` from the `flights` dataset and then assigns this subset to a new variable called `flights2`.\n-   Using `flights2`, we determine the largest arrival delay for each of the carriers.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights2 <- flights %>% \n  select(carrier_name, arr_delay)\nmax_delays <- flights2 %>% \n  group_by(carrier_name) %>%\n  summarize(max_arr_delay = max(arr_delay, na.rm = TRUE))\n```\n:::\n\n\n\nA useful function in the `knitr` package for making nice tables in *R Markdown* is called `kable`. It is much easier to use than manually entering values into a table by copying and pasting values into Excel or \\LaTeX. This again goes to show how nice reproducible documents can be! (Note the use of `results=\"asis\"`, which will produce the table instead of the code to create the table.) The `caption.short` argument is used to include a shorter title to appear in the List of Tables.\n\n\n\n\n```{.r .cell-code}\nkable(max_delays, \n      col.names = c(\"Airline\", \"Max Arrival Delay\"),\n      caption = \"Maximum Delays by Airline\",\n      caption.short = \"Max Delays by Airline\",\n      longtable = TRUE,\n      booktabs = TRUE)\n```\n\n::: {.cell-output-display}\nTable: Maximum Delays by Airline\n\n|Airline                | Max Arrival Delay|\n|:----------------------|-----------------:|\n|Alaska Airlines Inc.   |               338|\n|American Airlines Inc. |              1539|\n|Delta Air Lines Inc.   |               651|\n|Frontier Airlines Inc. |               575|\n|Hawaiian Airlines Inc. |               407|\n|JetBlue Airways        |               273|\n|SkyWest Airlines Inc.  |               421|\n|Southwest Airlines Co. |               694|\n|US Airways Inc.        |               347|\n|United Air Lines Inc.  |               472|\n|Virgin America         |               366|\n:::\n\n\n\nThe last two options make the table a little easier-to-read.\n\nWe can further look into the properties of the largest value here for American Airlines Inc. To do so, we can isolate the row corresponding to the arrival delay of 1539 minutes for American in our original `flights` dataset.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights %>% filter(arr_delay == 1539, \n                  carrier_name == \"American Airlines Inc.\") %>%\n  select(-c(month, day, carrier, dest_name, hour, \n            minute, carrier_name, arr_delay))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  dep_time dep_delay arr_time tailnum flight dest air_time distance\n1     1403      1553     1934  N595AA   1568  DFW      182     1616\n```\n:::\n:::\n\n\n\nWe see that the flight occurred on March 3rd and departed a little after 2 PM on its way to Dallas/Fort Worth. Lastly, we show how we can visualize the arrival delay of all departing flights from Portland on March 3rd against time of departure.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights %>% filter(month == 3, day == 3) %>%\n  ggplot(aes(x = dep_time, y = arr_delay)) + geom_point()\n```\n\n::: {.cell-output-display}\n![](01-chap1_files/figure-pdf/march3plot-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n## Additional resources\n\n-   Introduction to `dplyr` - <https://cran.rstudio.com/web/packages/dplyr/vignettes/introduction.html>\n\n-   `ggplot2` Documentation - <http://docs.ggplot2.org/current/>\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {
      "knitr": [
        "{\"type\":\"list\",\"attributes\":{},\"value\":[]}"
      ]
    },
    "preserve": null,
    "postProcess": false
  }
}